-- Import modules
import XMonad
-- Volume control-----------
import XMonad.Actions.Volume
import Data.Map (fromList)
import Data.Monoid (mappend)
-- Keys bing
import XMonad.Util.EZConfig
import System.IO
import System.Exit
--------------------------
import XMonad.Hooks.ManageDocks                                                                       
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.SetWMName
import XMonad.Hooks.DynamicLog
import qualified XMonad.StackSet as W
import qualified Data.Map as M
--
myTerminal      = "gnome-terminal"
myModMask       = mod4Mask --Win-icon key
myBorderWidth   = 3
myWorkspaces    = map show [1..9]

--Main config
main = do
    xmonad $ defaultConfig { 
        terminal    = myTerminal
        , modMask     = myModMask
        , borderWidth = myBorderWidth
        , workspaces = myWorkspaces
        , keys =        myKeys'
    }
--End of Main config
-- Theme {{{
-- Color names are easier to remember:
colorOrange         = "#FD971F"
colorDarkGray       = "#1B1D1E"
colorPink           = "#F92672"
colorGreen          = "#A6E22E"
colorBlue           = "#66D9EF"
colorYellow         = "#E6DB74"
colorWhite          = "#CCCCC6"
 
colorNormalBorder   = "#CCCCC6"
colorFocusedBorder  = "#fd971f"

barFont  = "terminus"
barXFont = "inconsolata:size=12"
xftFont = "xft: inconsolata-12"
--}}}
-- Key mapping {{{
myKeys' conf@(XConfig {XMonad.modMask = modMask}) = M.fromList $
    [ 
-- ((modMask,                    xK_p        ), runOrRaisePrompt largeXPConfig)
     ((modMask .|. shiftMask,      xK_Return   ), spawn $ XMonad.terminal conf)
    , ((modMask .|. shiftMask,      xK_c        ), kill)
    , ((modMask .|. shiftMask,      xK_l        ), spawn "slock")
    -- Programs
    , ((0,                          xK_Print    ), spawn "scrot -e 'mv $f ~/screenshots/'")
    , ((modMask,		            xK_o        ), spawn "chromium-browser")
    , ((modMask,                    xK_m        ), spawn "nautilus --no-desktop --browser")
    -- Media Keys
    , ((0,                          0x1008ff12  ), spawn "amixer -q sset Headphone toggle")        -- XF86AudioMute
    , ((0,                          0x1008ff11  ), spawn "amixer -q sset Headphone 5%-")   -- XF86AudioLowerVolume
    , ((0,                          0x1008ff13  ), spawn "amixer -q sset Headphone 5%+")   -- XF86AudioRaiseVolume
    , ((0,                          0x1008ff14  ), spawn "rhythmbox-client --play-pause")
    , ((0,                          0x1008ff17  ), spawn "rhythmbox-client --next")
    , ((0,                          0x1008ff16  ), spawn "rhythmbox-client --previous")
    , ((modMask,                    xK_F9 ), lowerVolume 3 >> return ())
    , ((modMask,                    xK_F10 ), raiseVolume 3 >> return ())
    , ((modMask,                    xK_F11), toggleMute    >> return ())
    -- layouts
--    , ((modMask,                    xK_space    ), sendMessage NextLayout)
--    , ((modMask .|. shiftMask,      xK_space    ), setLayout $ XMonad.layoutHook conf)          -- reset layout on current desktop to default
--    , ((modMask,                    xK_b        ), sendMessage ToggleStruts)
--    , ((modMask,                    xK_n        ), refresh)
--    , ((modMask,                    xK_Tab      ), windows W.focusDown)                         -- move focus to next window
--    , ((modMask,                    xK_j        ), windows W.focusDown)
--    , ((modMask,                    xK_k        ), windows W.focusUp  )
--    , ((modMask .|. shiftMask,      xK_j        ), windows W.swapDown)                          -- swap the focused window with the next window
--    , ((modMask .|. shiftMask,      xK_k        ), windows W.swapUp)                            -- swap the focused window with the previous window
--    , ((modMask,                    xK_Return   ), windows W.swapMaster)
--    , ((modMask,                    xK_t        ), withFocused $ windows . W.sink)              -- Push window back into tiling
--   , ((modMask,                    xK_h        ), sendMessage Shrink)                          -- %! Shrink a master area
--  , ((modMask,                    xK_l        ), sendMessage Expand)                          -- %! Expand a master area
--    , ((modMask,                    xK_comma    ), sendMessage (IncMasterN 1))
--    , ((modMask,                    xK_period   ), sendMessage (IncMasterN (-1)))


    -- workspaces
    , ((modMask .|. controlMask,   xK_Right     ), nextWS)
    , ((modMask .|. shiftMask,     xK_Right     ), shiftToNext)
    , ((modMask .|. controlMask,   xK_Left      ), prevWS)
    , ((modMask .|. shiftMask,     xK_Left      ), shiftToPrev)
    
    -- quit, or restart
    , ((modMask .|. shiftMask,      xK_q        ), io (exitWith ExitSuccess))
    , ((modMask,                    xK_q        ), spawn "/usr/bin/xmonad --recompile && /usr/bin/xmonad --restart")
    ]
    ++
    -- mod-[1..9] %! Switch to workspace N
    -- mod-shift-[1..9] %! Move client to workspace N
    [((m .|. modMask, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e] [1, 0]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

--}}}
-- vim:foldmethod=marker sw=4 sts=4 ts=4 tw=0 et ai nowrap
